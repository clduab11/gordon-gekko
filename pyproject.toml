[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ninja-gekko"
version = "2.0.0"
description = "Next-Generation Rust-Powered Autonomous Trading Bot with Advanced MCP Intelligence"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Ninja Gekko Development Team", email = "contact@ninja-gekko.ai"}
]
maintainers = [
    {name = "Ninja Gekko Development Team", email = "contact@ninja-gekko.ai"}
]
keywords = [
    "trading", "algorithmic-trading", "rust", "neural-networks", "autonomous-bot",
    "mcp-integration", "swarm-intelligence", "gpu-acceleration", "webassembly",
    "real-time", "financial-technology", "ruv-fann", "flow-nexus", "ninja-gekko"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: FastAPI"
]
requires-python = ">=3.11"

# Core dependencies
dependencies = [
    # Web framework and API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",

    # Async and concurrency
    "asyncio-mqtt>=0.16.0",
    "aiohttp>=3.9.0",
    "httpx>=0.25.0",

    # Data processing and analysis
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",

    # Machine Learning and AI
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "transformers>=4.35.0",
    "accelerate>=0.24.0",

    # Database and caching
    "sqlalchemy>=2.0.0",
    "redis>=5.0.0",
    "databases>=0.8.0",

    # Trading platform integrations
    "coinbase-advanced-py>=1.0.0",
    "binance-connector>=3.0.0",
    # "oanda-python>=0.1.0",  # Temporarily removed - package not found

    # Security and authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",

    # Configuration and environment
    "python-dotenv>=1.0.0",
    "dynaconf>=3.2.0",

    # Logging and monitoring
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",

    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.9.0",

    # Development and testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-benchmark>=4.0.0",
]

# Optional dependencies for enhanced features
[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ruff>=0.1.0",
]

gpu = [
    "torch[cu118]>=2.1.0",
    "torchvision[cu118]>=0.16.0",
    "torchaudio[cu118]>=2.1.0",
]

mps = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "torchaudio>=2.1.0",
]

web = [
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "dash>=2.14.0",
    "bokeh>=3.3.0",
]

jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.26.0",
    "matplotlib>=3.8.0",
    "seaborn>=0.13.0",
]

all = [
    "gordon-gekko[dev,gpu,mps,web,jupyter]",
]

[project.scripts]
ninja-gekko = "ninja_gekko.cli.main:main"

[project.urls]
Homepage = "https://ninja-gekko.ai"
Documentation = "https://docs.ninja-gekko.ai"  
Repository = "https://github.com/clduab11/ninja-gekko"
Issues = "https://github.com/clduab11/ninja-gekko/issues"
Changelog = "https://github.com/clduab11/ninja-gekko/blob/main/CHANGELOG.md"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["gordon_gekko*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["gordon_gekko"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "coinbase.*",
    "binance.*",
    "oanda.*",
    "torch.*",
    "torchvision.*",
    "transformers.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=gordon_gekko",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--benchmark-skip",
    "-ra",
    "--tb=short"
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow-running tests",
    "gpu: GPU-dependent tests",
    "trading: Trading-related tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["gordon_gekko"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]  # assert false